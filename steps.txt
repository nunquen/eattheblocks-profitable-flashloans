- Download project 
     git clone https://github.com/jklepatch/eattheblocks.git

cp -r eattheblocks/profitable-flashloans/9-setup-project/ eattheblocks-profitable-flashloans

Open eattheblocks-profitable-flashloans folder in VSCode

npm install -g truffle
npm i dotenv
npm install web3
npm install @uniswap/sdk
    -> This installs the node_modules folder

create account in https://infura.io/
    user: saul.maldonado@gmail.com
    pass: Infur@.123.!

    create Etherium project -> Flashloan

    copy wws endpoint link --> wss://mainnet.infura.io/ws/v3/71241e04d2904598bcd18c505c182280

create .env file in root folder

create run-arbitrage.js in root folder of this project    
    - Open a websocket connection and subscribe to ETH header channel

    - Connect to Poll Kyber to get market data for Dai and Eth

        - In the same transaction we'll query Kyber for ETH-DAI and DAI-ETH

        - Normalize prices from Kyber

Fixes on @uniswap/sdk
    - Token.fetchData -> replece by Fetcher.fetchTokenData
    - Pair.fetchData -> replaced by Fetcher.fetchPairData


WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING
    ========= NOTICE =========
    Request-Rate Exceeded  (this message will not be repeated)

    The default API keys for each service are provided as a highly-throttled,
    community resource for low-traffic projects and early prototyping.

    While your application will continue to function, we highly recommended
    signing up for your own API keys to improve performance, increase your
    request rate/limit and enable other perks, such as metrics and advanced APIs.

    For more details: https://docs.ethers.io/api-keys/
    ==========================
WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING

npm install -g truffle

execute in your project's main folder

    truffel init .
    -> this will create the contract, migration and test folders and truffel-config.js

Getting ETH private key and address for testing
    - Go to https://vanity-eth.tk/ scroll bottom and get ETH address and private key
    - address and private key are saved in .env file 
    - in run-arbitrage.js 
        if (process.env.NODE_ENV.trim() == 'development'){
            PRIVATE_KEY = process.env.ETH_PRIVATE_KEY_FOR_TESTING;
        }
        // Setting private key in order to sign transactions in web3
        web3.eth.accounts.wallet.add(PRIVATE_KEY);

